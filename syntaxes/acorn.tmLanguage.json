{
    "scopeName": "source.acorn",
    "name": "acorn",
    "patterns": [
        {
            "include": "#whitespace"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#declarations"
        },
        {
            "include": "#constants"
        },
        {
            "include": "#comments"
        },
        {
            "include": "#primitives"
        }
    ],
    "repository": {
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.acorn",
                    "match": "\\b(if|in|for|let|containers|secrets|jobs|localData|args|volumes|std|services|acorns|images|profiles|routers|labels|annotations)\\b"
                },
                {
                    "name": "keyword.value.acorn",
                    "match": "\\b(null|true|false)\\b"
                },
                {
                    "name": "keyword.preamble.acorn",
                    "match": "\\b(package|import)\\b"
                },
                {
                    "match": "[\\+\\-\\*]|/(?![/*])",
                    "name": "keyword.operator.acorn"
                },
                {
                    "match": "(?<![\\p{L}\\p{Nd}_\\$\\#])(?:div|mod|quo|rem)(?![\\p{L}\\p{Nd}_\\$\\#])",
                    "name": "keyword.operator.word.acorn"
                },
                {
                    "match": "=[=~]|![=~]|<=|>=|[<](?![-=])|[>](?![=])",
                    "name": "keyword.operator.comparison.acorn"
                },
                {
                    "match": "&{2}|\\|{2}|!(?![=~])",
                    "name": "keyword.operator.logical.acorn"
                },
                {
                    "match": "&(?!&)|\\|(?!\\|)",
                    "name": "keyword.operator.set.acorn"
                }
            ]
        },
        "declarations": {
            "patterns": [
                {
                    "name": "support.type.property-name.acorn",
                    "match": "(#\\w*)"
                },
                {
                    "name": "variable.parameter.acorn",
                    "match": "(\\w*?):"
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "begin": "/\\*\\*(?!/)",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.acorn"
                        }
                    },
                    "end": "\\*/",
                    "name": "comment.block.documentation.acorn"
                },
                {
                    "begin": "/\\*",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.acorn"
                        }
                    },
                    "end": "\\*/",
                    "name": "comment.block.acorn"
                },
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.comment.acorn"
                        }
                    },
                    "match": "(//).*$\\n?",
                    "name": "comment.line.double-slash.js"
                }
            ]
        },
        "constants": {
            "patterns": [
                {
                    "match": "(?<![\\p{L}\\p{Nd}_\\$\\#])_(?!\\|)(?![\\p{L}\\p{Nd}_\\$\\#])",
                    "name": "constant.language.top.acorn"
                },
                {
                    "match": "(?<![\\p{L}\\p{Nd}_\\$\\#])_\\|_(?![\\p{L}\\p{Nd}_\\$\\#])",
                    "name": "constant.language.bottom.acorn"
                },
                {
                    "match": "(?<![\\p{L}\\p{Nd}_\\$\\#])null(?![\\p{L}\\p{Nd}_\\$\\#])",
                    "name": "constant.language.null.acorn"
                },
                {
                    "match": "\\b((0(x|X)[0-9a-fA-F_]*)|(([0-9][0-9_]*\\.[0-9][0-9_]*)|(\\.[0-9][0-9_]*))((e|E)(\\+|-)?[0-9][0-9_]*)?|[0-9][0-9_]*)([LlFfDd]|UL|ul)?\\b",
                    "name": "constant.numeric.acorn"
                }
            ]
        },
        "primitives": {
            "patterns": [
                {
                    "name": "storage.type.acorn",
                    "match": "\\b(null|bool|string|bytes|number|int|float|struct|list)\\b"
                }
            ]
        },
        "strings": {
            "name": "string.quoted.double.acorn",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "constant.character.escape.acorn",
                    "match": "\\\\."
                }
            ]
        },
        "whitespace": {
            "match": "[ \\t\\r\\n]+"
        }
    }
}